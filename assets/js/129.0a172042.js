(window.webpackJsonp=window.webpackJsonp||[]).push([[129],{454:function(s,a,t){"use strict";t.r(a);var n=t(7),e=Object(n.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("blockquote",[a("p",[s._v("笔记来源："),a("a",{attrs:{href:"https://www.bilibili.com/video/BV1PJ411n7xZ",title:"尚硅谷JVM全套教程，百万播放，全网巅峰（宋红康详解java虚拟机）",target:"_blank",rel:"noopener noreferrer"}},[s._v("尚硅谷 JVM 全套教程，百万播放，全网巅峰（宋红康详解 java 虚拟机）"),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("转载来源：https://gitee.com/vectorx/NOTE_JVM")])]),s._v(" "),a("p",[s._v("[toc]")]),s._v(" "),a("h1",{attrs:{id:"_6-堆"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-堆"}},[s._v("#")]),s._v(" 6. 堆")]),s._v(" "),a("h2",{attrs:{id:"_6-1-堆-heap-的核心概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-堆-heap-的核心概述"}},[s._v("#")]),s._v(" 6.1. 堆（Heap）的核心概述")]),s._v(" "),a("p",[s._v("堆针对一个 JVM 进程来说是唯一的，也就是一个进程只有一个 JVM，但是进程包含多个线程，他们是共享同一堆空间的。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/0be60cad417bedd46d651f710ae585ce.png",alt:"image-20200706195127740"}})]),s._v(" "),a("p",[s._v("一个 JVM 实例只存在一个堆内存，堆也是 Java 内存管理的核心区域。")]),s._v(" "),a("p",[s._v("Java 堆区在 JVM 启动的时候即被创建，其空间大小也就确定了。是 JVM 管理的最大一块内存空间。")]),s._v(" "),a("ul",[a("li",[s._v("堆内存的大小是可以调节的。")])]),s._v(" "),a("p",[s._v("《Java 虚拟机规范》规定，堆可以处于物理上不连续的内存空间中，但在逻辑上它应该被视为连续的。")]),s._v(" "),a("p",[s._v("所有的线程共享 Java 堆，在这里还可以划分线程私有的缓冲区（Thread Local Allocation Buffer，TLAB）。")]),s._v(" "),a("p",[s._v("《Java 虚拟机规范》中对 Java 堆的描述是：所有的对象实例以及数组都应当在运行时分配在堆上。（"),a("code",[s._v("The heap is the run-time data area from which memory for all class instances and arrays is allocated")]),s._v("）")]),s._v(" "),a("p",[s._v("数组和对象可能永远不会存储在栈上，因为栈帧中保存引用，这个引用指向对象或者数组在堆中的位置。")]),s._v(" "),a("p",[s._v("在方法结束后，堆中的对象不会马上被移除，仅仅在垃圾收集的时候才会被移除。")]),s._v(" "),a("p",[s._v("堆，是 GC（Garbage Collection，垃圾收集器）执行垃圾回收的重点区域。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/3ae9948d069bd58ccfcda730cc12bf0f.png",alt:"image-20200706201904057"}})]),s._v(" "),a("h3",{attrs:{id:"_6-1-1-堆内存细分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-1-堆内存细分"}},[s._v("#")]),s._v(" 6.1.1. 堆内存细分")]),s._v(" "),a("p",[s._v("Java 7 及之前堆内存逻辑上分为三部分：新生区+养老区+"),a("mark",[s._v("永久区")])]),s._v(" "),a("ul",[a("li",[s._v("Young Generation Space 新生区 Young/New 又被划分为 Eden 区和 Survivor 区")]),s._v(" "),a("li",[s._v("Tenure generation space 养老区 Old/Tenure")]),s._v(" "),a("li",[s._v("Permanent Space 永久区 Perm")])]),s._v(" "),a("p",[s._v("Java 8 及之后堆内存逻辑上分为三部分：新生区+养老区+"),a("mark",[s._v("元空间")])]),s._v(" "),a("ul",[a("li",[s._v("Young Generation Space 新生区 Young/New 又被划分为 Eden 区和 Survivor 区")]),s._v(" "),a("li",[s._v("Tenure generation space 养老区 Old/Tenure")]),s._v(" "),a("li",[s._v("Meta Space 元空间 Meta")])]),s._v(" "),a("p",[s._v("约定：新生区（代）<=>年轻代 、 养老区<=>老年区（代）、 永久区<=>永久代")]),s._v(" "),a("h3",{attrs:{id:"_6-1-2-堆空间内部结构-jdk7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-2-堆空间内部结构-jdk7"}},[s._v("#")]),s._v(" 6.1.2. 堆空间内部结构（JDK7）")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/deafdcce7cf88a496bc231820bb5b007.png",alt:"image-20200706203419496"}})]),s._v(" "),a("h3",{attrs:{id:"_6-1-3-堆空间内部结构-jdk8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-3-堆空间内部结构-jdk8"}},[s._v("#")]),s._v(" 6.1.3. 堆空间内部结构（JDK8）")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/ee2836af2e1d5387b4ac58f5eacabbb6.png",alt:"image-20200706203835403"}})]),s._v(" "),a("h2",{attrs:{id:"_6-2-设置堆内存大小与-oom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-设置堆内存大小与-oom"}},[s._v("#")]),s._v(" 6.2. 设置堆内存大小与 OOM")]),s._v(" "),a("h3",{attrs:{id:"_6-2-1-堆空间大小的设置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-1-堆空间大小的设置"}},[s._v("#")]),s._v(" 6.2.1. 堆空间大小的设置")]),s._v(" "),a("p",[s._v('Java 堆区用于存储 Java 对象实例，那么堆的大小在 JVM 启动时就已经设定好了，大家可以通过选项"-Xmx"和"-Xms"来进行设置。')]),s._v(" "),a("ul",[a("li",[s._v('“-Xms"用于表示堆区的起始内存，等价于'),a("code",[s._v("-XX:InitialHeapSize")])]),s._v(" "),a("li",[s._v('“-Xmx"则用于表示堆区的最大内存，等价于'),a("code",[s._v("-XX:MaxHeapSize")])])]),s._v(" "),a("p",[s._v('一旦堆区中的内存大小超过“-Xmx"所指定的最大内存时，将会抛出 OutOfMemoryError 异常。')]),s._v(" "),a("p",[s._v("通常会将-Xms 和-Xmx 两个参数配置相同的值，其目的是"),a("mark",[s._v("为了能够在 ava 垃圾回收机制清理完堆区后不需要重新分隔计算堆区的大小，从而提高性能。")])]),s._v(" "),a("p",[s._v("默认情况下")]),s._v(" "),a("ul",[a("li",[s._v("初始内存大小：物理电脑内存大小 / 64")]),s._v(" "),a("li",[s._v("最大内存大小：物理电脑内存大小 / 4")])]),s._v(" "),a("h3",{attrs:{id:"_6-2-2-outofmemory-举例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-2-outofmemory-举例"}},[s._v("#")]),s._v(" 6.2.2. OutOfMemory 举例")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("OOMTest")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Picture")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" list "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("InterruptedException")]),s._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printStackTrace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Picture")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Random")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("nextInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1024")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1024")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Exception")]),s._v(" in thread "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"main"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("lang"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")])]),s._v("OutofMemoryError")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Java")]),s._v(" heap space\n    at "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("atguigu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")])]),s._v("Picture")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("init"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("OOMTest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" java"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("25")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    at "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("atguigu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")])]),s._v("O0MTest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("OOMTest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("java"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h2",{attrs:{id:"_6-3-年轻代与老年代"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-年轻代与老年代"}},[s._v("#")]),s._v(" 6.3. 年轻代与老年代")]),s._v(" "),a("p",[s._v("存储在 JVM 中的 Java 对象可以被划分为两类：")]),s._v(" "),a("ul",[a("li",[s._v("一类是生命周期较短的瞬时对象，这类对象的创建和消亡都非常迅速")]),s._v(" "),a("li",[s._v("另外一类对象的生命周期却非常长，在某些极端的情况下还能够与 JVM 的生命周期保持一致")])]),s._v(" "),a("p",[s._v("Java 堆区进一步细分的话，可以划分为年轻代（YoungGen）和老年代（oldGen）")]),s._v(" "),a("p",[s._v("其中年轻代又可以划分为 Eden 空间、Survivor0 空间和 Survivor1 空间（有时也叫做 from 区、to 区）")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/f3ee86daaf5076fe22265ffcaa831175.png",alt:"image-20200707075847954"}})]),s._v(" "),a("p",[s._v("下面这参数开发中一般不会调：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/7d9c2d1f9ef9f315f01b3441c6e81660.png",alt:"image-20200707080154039"}})]),s._v(" "),a("p",[s._v("配置新生代与老年代在堆结构的占比。")]),s._v(" "),a("ul",[a("li",[s._v("默认"),a("code",[s._v("-XX:NewRatio=2")]),s._v("，表示新生代占 1，老年代占 2，新生代占整个堆的 1/3")]),s._v(" "),a("li",[s._v("可以修改"),a("code",[s._v("-XX:NewRatio=4")]),s._v("，表示新生代占 1，老年代占 4，新生代占整个堆的 1/5")])]),s._v(" "),a("p",[s._v("在 HotSpot 中，Eden 空间和另外两个 survivor 空间缺省所占的比例是 8：1：1")]),s._v(" "),a("p",[s._v("当然开发人员可以通过选项“"),a("code",[s._v("-xx:SurvivorRatio")]),s._v("”调整这个空间比例。比如"),a("code",[s._v("-xx:SurvivorRatio=8")])]),s._v(" "),a("p",[a("mark",[s._v("几乎所有的 Java 对象都是在 Eden 区被 new 出来的。")]),s._v("绝大部分的 Java 对象的销毁都在新生代进行了。")]),s._v(" "),a("ul",[a("li",[s._v("IBM 公司的专门研究表明，新生代中 80%的对象都是“朝生夕死”的。")])]),s._v(" "),a("p",[s._v('可以使用选项"'),a("code",[s._v("-Xmn")]),s._v('"设置新生代最大内存大小，这个参数一般使用默认值就可以了。')]),s._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/31fd90d99565ec8ce0682a4468076f94.png",alt:"image-20210510105849497"}})]),s._v(" "),a("h2",{attrs:{id:"_6-4-图解对象分配过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-图解对象分配过程"}},[s._v("#")]),s._v(" 6.4. 图解对象分配过程")]),s._v(" "),a("p",[s._v("为新对象分配内存是一件非常严谨和复杂的任务，JVM 的设计者们不仅需要考虑内存如何分配、在哪里分配等问题，并且由于内存分配算法与内存回收算法密切相关，所以还需要考虑 GC 执行完内存回收后是否会在内存空间中产生内存碎片。")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("new 的对象先放伊甸园区。此区有大小限制。")])]),s._v(" "),a("li",[a("p",[s._v("当伊甸园的空间填满时，程序又需要创建对象，JVM 的垃圾回收器将对伊甸园区进行垃圾回收（MinorGC），将伊甸园区中的不再被其他对象所引用的对象进行销毁。再加载新的对象放到伊甸园区")])]),s._v(" "),a("li",[a("p",[s._v("然后将伊甸园中的剩余对象移动到幸存者 0 区。")])]),s._v(" "),a("li",[a("p",[s._v("如果再次触发垃圾回收，此时上次幸存下来的放到幸存者 0 区的，如果没有回收，就会放到幸存者 1 区。")])]),s._v(" "),a("li",[a("p",[s._v("如果再次经历垃圾回收，此时会重新放回幸存者 0 区，接着再去幸存者 1 区。")])]),s._v(" "),a("li",[a("p",[s._v("啥时候能去养老区呢？可以设置次数。默认是 15 次。")]),s._v(" "),a("ul",[a("li",[a("mark",[s._v("可以设置参数："),a("code",[s._v("-Xx:MaxTenuringThreshold= N")]),s._v("进行设置")])])])]),s._v(" "),a("li",[a("p",[s._v("在养老区，相对悠闲。当养老区内存不足时，再次触发 GC：Major GC，进行养老区的内存清理")])]),s._v(" "),a("li",[a("p",[s._v("若养老区执行了 Major GC 之后，发现依然无法进行对象的保存，就会产生 OOM 异常。")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("lang"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")])]),s._v("OutofMemoryError")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Java")]),s._v(" heap space\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/9d588ca1c3495a21ada5b7fce89c6633.png",alt:"第08章_新生代对象分配与回收过程"}})]),s._v(" "),a("p",[a("strong",[s._v("流程图")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/23b91eb543fc0072cb628365267f0089.png",alt:"image-20200707091058346"}})]),s._v(" "),a("p",[a("strong",[s._v("总结")])]),s._v(" "),a("ul",[a("li",[a("mark",[s._v("针对幸存者 s0，s1 区的总结：复制之后有交换，谁空谁是 to")])]),s._v(" "),a("li",[a("mark",[s._v("关于垃圾回收：频繁在新生区收集，很少在老年代收集，几乎不再永久代和元空间进行收集")])])]),s._v(" "),a("p",[a("strong",[s._v("常用调优工具（在 JVM 下篇：性能监控与调优篇会详细介绍）")])]),s._v(" "),a("ul",[a("li",[s._v("JDK 命令行")]),s._v(" "),a("li",[s._v("Eclipse:Memory Analyzer Tool")]),s._v(" "),a("li",[s._v("Jconsole")]),s._v(" "),a("li",[s._v("VisualVM")]),s._v(" "),a("li",[s._v("Jprofiler")]),s._v(" "),a("li",[s._v("Java Flight Recorder")]),s._v(" "),a("li",[s._v("GCViewer")]),s._v(" "),a("li",[s._v("GC Easy")])]),s._v(" "),a("h2",{attrs:{id:"_6-5-minor-gc-majorgc、full-gc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-5-minor-gc-majorgc、full-gc"}},[s._v("#")]),s._v(" 6.5. Minor GC，MajorGC、Full GC")]),s._v(" "),a("p",[s._v("JVM 在进行 GC 时，并非每次都对上面三个内存区域一起回收的，大部分时候回收的都是指新生代。")]),s._v(" "),a("p",[s._v("针对 Hotspot VM 的实现，它里面的 GC 按照回收区域又分为两大种类型：一种是部分收集（Partial GC），一种是整堆收集（FullGC）")]),s._v(" "),a("ul",[a("li",[s._v("部分收集：不是完整收集整个 Java 堆的垃圾收集。其中又分为：\n"),a("ul",[a("li",[s._v("新生代收集（Minor GC / Young GC）：只是新生代的垃圾收集")]),s._v(" "),a("li",[s._v("老年代收集（Major GC / Old GC）：只是老年代的圾收集。\n"),a("ul",[a("li",[s._v("目前，只有 CMSGC 会有单独收集老年代的行为。")]),s._v(" "),a("li",[a("mark",[s._v("注意，很多时候 Major GC 会和 Full GC 混淆使用，需要具体分辨是老年代回收还是整堆回收。")])])])]),s._v(" "),a("li",[s._v("混合收集（MixedGC）：收集整个新生代以及部分老年代的垃圾收集。\n"),a("ul",[a("li",[s._v("目前，只有 G1 GC 会有这种行为")])])])])]),s._v(" "),a("li",[s._v("整堆收集（Full GC）：收集整个 java 堆和方法区的垃圾收集。")])]),s._v(" "),a("h3",{attrs:{id:"_6-5-1-最简单的分代式-gc-策略的触发条件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-5-1-最简单的分代式-gc-策略的触发条件"}},[s._v("#")]),s._v(" 6.5.1. 最简单的分代式 GC 策略的触发条件")]),s._v(" "),a("h3",{attrs:{id:"年轻代-gc-minor-gc-触发机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#年轻代-gc-minor-gc-触发机制"}},[s._v("#")]),s._v(" 年轻代 GC（Minor GC）触发机制")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("当年轻代空间不足时，就会触发 MinorGC，这里的年轻代满指的是 Eden 代满，Survivor 满不会引发 GC。（每次 Minor GC 会清理年轻代的内存。）")])]),s._v(" "),a("li",[a("p",[s._v("因为"),a("mark",[s._v("Java 对象大多都具备朝生夕灭的特性")]),s._v(".，所以 Minor GC 非常频繁，一般回收速度也比较快。这一定义既清晰又易于理解。")])]),s._v(" "),a("li",[a("p",[s._v("Minor GC 会引发 STW，暂停其它用户的线程，等垃圾回收结束，用户线程才恢复运行")])])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/29146da9c1f3a3241d52201641899020.png",alt:"image-20200707095606813"}})]),s._v(" "),a("h3",{attrs:{id:"老年代-gc-major-gc-full-gc-触发机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#老年代-gc-major-gc-full-gc-触发机制"}},[s._v("#")]),s._v(" 老年代 GC（Major GC / Full GC）触发机制")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("指发生在老年代的 GC，对象从老年代消失时，我们说 “Major GC” 或 “Full GC” 发生了")])]),s._v(" "),a("li",[a("p",[s._v("出现了 Major Gc，经常会伴随至少一次的 Minor GC（但非绝对的，在 Paralle1 Scavenge 收集器的收集策略里就有直接进行 MajorGC 的策略选择过程）")]),s._v(" "),a("ul",[a("li",[s._v("也就是在老年代空间不足时，会先尝试触发 Minor Gc。如果之后空间还不足，则触发 Major GC")])])]),s._v(" "),a("li",[a("p",[s._v("Major GC 的速度一般会比 Minor GC 慢 10 倍以上，STW 的时间更长")])]),s._v(" "),a("li",[a("p",[s._v("如果 Major GC 后，内存还不足，就报 OOM 了")])])]),s._v(" "),a("h3",{attrs:{id:"full-gc-触发机制-后面细讲"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#full-gc-触发机制-后面细讲"}},[s._v("#")]),s._v(" Full GC 触发机制（后面细讲）：")]),s._v(" "),a("p",[s._v("触发 Full GC 执行的情况有如下五种：")]),s._v(" "),a("ol",[a("li",[s._v("调用 System.gc()时，系统建议执行 Full GC，但是不必然执行")]),s._v(" "),a("li",[s._v("老年代空间不足")]),s._v(" "),a("li",[s._v("方法区空间不足")]),s._v(" "),a("li",[s._v("通过 Minor GC 后进入老年代的平均大小大于老年代的可用内存")]),s._v(" "),a("li",[s._v("由 Eden 区、survivor space0（From Space）区向 survivor space1（To Space）区复制时，对象大小大于 To Space 可用内存，则把该对象转存到老年代，且老年代的可用内存小于该对象大小")])]),s._v(" "),a("p",[a("mark",[s._v("说明：Full GC 是开发或调优中尽量要避免的。这样暂时时间会短一些")])]),s._v(" "),a("h2",{attrs:{id:"_6-6-堆空间分代思想"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-6-堆空间分代思想"}},[s._v("#")]),s._v(" 6.6. 堆空间分代思想")]),s._v(" "),a("p",[s._v("为什么要把 Java 堆分代？不分代就不能正常工作了吗？")]),s._v(" "),a("p",[s._v("经研究，不同对象的生命周期不同。70%-99%的对象是临时对象。")]),s._v(" "),a("ul",[a("li",[s._v("新生代：有 Eden、两块大小相同的 survivor（又称为 from/to，s0/s1）构成，to 总为空。")]),s._v(" "),a("li",[s._v("老年代：存放新生代中经历多次 GC 仍然存活的对象。")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/d776de4eb3a801b6e271b3f870317aa1.png",alt:"image-20200707101511025"}})]),s._v(" "),a("p",[s._v("其实不分代完全可以，分代的唯一理由就是优化 GC 性能。如果没有分代，那所有的对象都在一块，就如同把一个学校的人都关在一个教室。GC 的时候要找到哪些对象没用，这样就会对堆的所有区域进行扫描。而很多对象都是朝生夕死的，如果分代的话，把新创建的对象放到某一地方，当 GC 的时候先把这块存储“朝生夕死”对象的区域进行回收，这样就会腾出很大的空间出来。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/9b5ad9b0a881973d2955e61f7ebed160.png",alt:"image-20200707101543871"}})]),s._v(" "),a("h2",{attrs:{id:"_6-7-内存分配策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-7-内存分配策略"}},[s._v("#")]),s._v(" 6.7. 内存分配策略")]),s._v(" "),a("p",[s._v("如果对象在 Eden 出生并经过第一次 Minor GC 后仍然存活，并且能被 Survivor 容纳的话，将被移动到 survivor 空间中，并将对象年龄设为 1。对象在 survivor 区中每熬过一次 MinorGC，年龄就增加 1 岁，当它的年龄增加到一定程度（默认为 15 岁，其实每个 JVM、每个 GC 都有所不同）时，就会被晋升到老年代")]),s._v(" "),a("p",[s._v("对象晋升老年代的年龄阀值，可以通过选项"),a("code",[s._v("-XX:MaxTenuringThreshold")]),s._v("来设置")]),s._v(" "),a("p",[s._v("针对不同年龄段的对象分配原则如下所示：")]),s._v(" "),a("ul",[a("li",[s._v("优先分配到 Eden")]),s._v(" "),a("li",[s._v("大对象直接分配到老年代（尽量避免程序中出现过多的大对象）")]),s._v(" "),a("li",[s._v("长期存活的对象分配到老年代")]),s._v(" "),a("li",[s._v("动态对象年龄判断：如果 survivor 区中相同年龄的所有对象大小的总和大于 Survivor 空间的一半，年龄大于或等于该年龄的对象可以直接进入老年代，无须等到"),a("code",[s._v("MaxTenuringThreshold")]),s._v("中要求的年龄。")]),s._v(" "),a("li",[s._v("空间分配担保： "),a("code",[s._v("-XX:HandlePromotionFailure")])])]),s._v(" "),a("h2",{attrs:{id:"_6-8-为对象分配内存-tlab"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-8-为对象分配内存-tlab"}},[s._v("#")]),s._v(" 6.8. 为对象分配内存：TLAB")]),s._v(" "),a("h3",{attrs:{id:"_6-8-1-为什么有-tlab-thread-local-allocation-buffer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-8-1-为什么有-tlab-thread-local-allocation-buffer"}},[s._v("#")]),s._v(" 6.8.1. 为什么有 TLAB（Thread Local Allocation Buffer）？")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("堆区是线程共享区域，任何线程都可以访问到堆区中的共享数据")])]),s._v(" "),a("li",[a("p",[s._v("由于对象实例的创建在 JVM 中非常频繁，因此在并发环境下从堆区中划分内存空间是线程不安全的")])]),s._v(" "),a("li",[a("p",[s._v("为避免多个线程操作同一地址，需要使用加锁等机制，进而影响分配速度。")])])]),s._v(" "),a("h3",{attrs:{id:"_6-8-2-什么是-tlab"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-8-2-什么是-tlab"}},[s._v("#")]),s._v(" 6.8.2. 什么是 TLAB？")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("从内存模型而不是垃圾收集的角度，对 Eden 区域继续进行划分，JVM 为"),a("mark",[s._v("每个线程分配了一个私有缓存区域")]),s._v("，它包含在 Eden 空间内。")])]),s._v(" "),a("li",[a("p",[s._v("多线程同时分配内存时，使用 TLAB 可以避免一系列的非线程安全问题，同时还能够提升内存分配的吞吐量，因此我们可以将这种内存分配方式称之为"),a("mark",[s._v("快速分配策略")]),s._v("。")])]),s._v(" "),a("li",[a("p",[s._v("据我所知所有 OpenJDK 衍生出来的 JVM 都提供了 TLAB 的设计。")])])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/90162691ef6b0f4dc96be1c1ab02dc8b.png",alt:"image-20210510114110526"}})]),s._v(" "),a("h3",{attrs:{id:"_6-8-3-tlab-的再说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-8-3-tlab-的再说明"}},[s._v("#")]),s._v(" 6.8.3. TLAB 的再说明")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("尽管不是所有的对象实例都能够在 TLAB 中成功分配内存，但"),a("mark",[s._v("JVM 确实是将 TLAB 作为内存分配的首选")]),s._v("。")])]),s._v(" "),a("li",[a("p",[s._v("在程序中，开发人员可以通过选项“"),a("code",[s._v("-XX:UseTLAB")]),s._v("”设置是否开启 TLAB 空间。")])]),s._v(" "),a("li",[a("p",[s._v("默认情况下，TLAB 空间的内存非常小，"),a("mark",[s._v("仅占有整个 Eden 空间的 1%")]),s._v("，当然我们可以通过选项 “"),a("code",[s._v("-XX:TLABWasteTargetPercent")]),s._v("” 设置 TLAB 空间所占用 Eden 空间的百分比大小。")])]),s._v(" "),a("li",[a("p",[s._v("一旦对象在 TLAB 空间分配内存失败时，JVM 就会尝试着通过使用加锁机制确保数据操作的原子性，从而直接在 Eden 空间中分配内存。")])])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/011ab4c65cfe41f64208447bf6c9d6d7.png",alt:"image-20200707104253530"}})]),s._v(" "),a("h2",{attrs:{id:"_6-9-小结-堆空间的参数设置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-9-小结-堆空间的参数设置"}},[s._v("#")]),s._v(" 6.9. 小结：堆空间的参数设置")]),s._v(" "),a("p",[s._v("官网地址："),a("a",{attrs:{href:"https://docs.oracle.com/javase/8/docs/technotes/tools/windows/java.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://docs.oracle.com/javase/8/docs/technotes/tools/windows/java.html"),a("OutboundLink")],1)]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 详细的参数内容会在JVM下篇：性能监控与调优篇中进行详细介绍，这里先熟悉下")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("XX")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("PrintFlagsInitial")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//查看所有的参数的默认初始值")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("XX")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("PrintFlagsFinal")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//查看所有的参数的最终值（可能会存在修改，不再是初始值）")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Xms")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//初始堆空间内存（默认为物理内存的1/64）")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Xmx")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//最大堆空间内存（默认为物理内存的1/4）")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Xmn")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//设置新生代的大小。（初始值及最大值）")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("XX")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("NewRatio")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//配置新生代与老年代在堆结构的占比")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("XX")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SurvivorRatio")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//设置新生代中Eden和S0/S1空间的比例")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("XX")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MaxTenuringThreshold")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//设置新生代垃圾的最大年龄")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("XX")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("PrintGCDetails")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//输出详细的GC处理日志")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//打印gc简要信息：①-Xx：+PrintGC ② - verbose:gc")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("XX")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HandlePromotionFalilure")]),s._v("："),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//是否设置空间分配担保")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("在发生 Minor GC 之前，虚拟机会"),a("mark",[s._v("检查老年代最大可用的连续空间是否大于新生代所有对象的总空间")]),s._v("。")]),s._v(" "),a("ul",[a("li",[s._v("如果大于，则此次 Minor GC 是安全的")]),s._v(" "),a("li",[s._v("如果小于，则虚拟机会查看"),a("code",[s._v("-XX:HandlePromotionFailure")]),s._v("设置值是否允担保失败。\n"),a("ul",[a("li",[s._v("如果"),a("code",[s._v("HandlePromotionFailure=true")]),s._v("，那么会继续检查老年代最大可用连续空间是否大于历次晋升到老年代的对象的平均大小。\n"),a("ul",[a("li",[s._v("如果大于，则尝试进行一次 Minor GC，但这次 Minor GC 依然是有风险的；")]),s._v(" "),a("li",[s._v("如果小于，则改为进行一次 Full GC。")])])]),s._v(" "),a("li",[s._v("如果"),a("code",[s._v("HandlePromotionFailure=false")]),s._v("，则改为进行一次 Full Gc。")])])])]),s._v(" "),a("p",[s._v("在 JDK6 Update24 之后，HandlePromotionFailure 参数不会再影响到虚拟机的空间分配担保策略，观察 openJDK 中的源码变化，虽然源码中还定义了 HandlePromotionFailure 参数，但是在代码中已经不会再使用它。JDK6 Update 24 之后的规则变为"),a("mark",[s._v("只要老年代的连续空间大于新生代对象总大小或者历次晋升的平均大小就会进行 Minor GC")]),s._v("，否则将进行 FullGC。")]),s._v(" "),a("h2",{attrs:{id:"_6-x-堆是分配对象的唯一选择么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-x-堆是分配对象的唯一选择么"}},[s._v("#")]),s._v(" 6.X. 堆是分配对象的唯一选择么？")]),s._v(" "),a("p",[s._v("在《深入理解 Java 虚拟机》中关于 Java 堆内存有这样一段描述：")]),s._v(" "),a("blockquote",[a("p",[s._v("随着 JIT 编译期的发展与"),a("mark",[s._v("逃逸分析技术")]),s._v("逐渐成熟，"),a("mark",[s._v("栈上分配")]),s._v("、"),a("mark",[s._v("标量替换优化技术")]),s._v("将会导致一些微妙的变化，所有的对象都分配到堆上也渐渐变得不那么“绝对”了。")])]),s._v(" "),a("p",[s._v("在 Java 虚拟机中，对象是在 Java 堆中分配内存的，这是一个普遍的常识。但是，有一种特殊情况，那就是"),a("mark",[s._v("如果经过逃逸分析（Escape Analysis）后发现，一个对象并没有逃逸出方法的话，那么就可能被优化成栈上分配")]),s._v(".。这样就无需在堆上分配内存，也无须进行垃圾回收了。这也是最常见的堆外存储技术。")]),s._v(" "),a("p",[s._v("此外，前面提到的基于 OpenJDK 深度定制的 TaoBaoVM，其中创新的 GCIH（GC invisible heap）技术实现 off-heap，将生命周期较长的 Java 对象从 heap 中移至 heap 外，并且 GC 不能管理 GCIH 内部的 Java 对象，以此达到降低 GC 的回收频率和提升 GC 的回收效率的目的。")]),s._v(" "),a("h3",{attrs:{id:"_6-x-1-逃逸分析概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-x-1-逃逸分析概述"}},[s._v("#")]),s._v(" 6.X.1. 逃逸分析概述")]),s._v(" "),a("p",[s._v("如何将堆上的对象分配到栈，需要使用逃逸分析手段。")]),s._v(" "),a("p",[s._v("这是一种可以有效减少 Java 程序中同步负载和内存堆分配压力的跨函数全局数据流分析算法。")]),s._v(" "),a("p",[s._v("通过逃逸分析，Java Hotspot 编译器能够分析出一个新的对象的引用的使用范围从而决定是否要将这个对象分配到堆上。")]),s._v(" "),a("p",[s._v("逃逸分析的基本行为就是分析对象动态作用域：")]),s._v(" "),a("ul",[a("li",[s._v("当一个对象在方法中被定义后，对象只在方法内部使用，则认为没有发生逃逸。")]),s._v(" "),a("li",[s._v("当一个对象在方法中被定义后，它被外部方法所引用，则认为发生逃逸。例如作为调用参数传递到其他地方中。")])]),s._v(" "),a("p",[a("strong",[s._v("举例 1")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("my_method")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),s._v(" v "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// use v")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ....")]),s._v("\n    v "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("没有发生逃逸的对象，则可以分配到栈上，随着方法执行的结束，栈空间就被移除，每个栈里面包含了很多栈帧")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StringBuffer")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("createStringBuffer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StringBuffer")]),s._v(" sb "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StringBuffer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    sb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("append")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    sb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("append")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" sb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("上述方法如果想要"),a("code",[s._v("StringBuffer sb")]),s._v("不发生逃逸，可以这样写")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("createStringBuffer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StringBuffer")]),s._v(" sb "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StringBuffer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    sb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("append")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    sb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("append")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" sb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[a("strong",[s._v("举例 2")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("EscapeAnalysis")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("EscapeAnalysis")]),s._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n     * 方法返回EscapeAnalysis对象，发生逃逸\n     * @return\n     */")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("EscapeAnalysis")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getInstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("EscapeAnalysis")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n     * 为成员属性赋值，发生逃逸\n     */")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("setObj")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("EscapeAnalysis")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n     * 对象的作用于仅在当前方法中有效，没有发生逃逸\n     */")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("useEscapeAnalysis")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("EscapeAnalysis")]),s._v(" e "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("EscapeAnalysis")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n     * 引用成员变量的值，发生逃逸\n     */")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("useEscapeAnalysis2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("EscapeAnalysis")]),s._v(" e "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getInstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br")])]),a("p",[a("strong",[s._v("参数设置")])]),s._v(" "),a("p",[s._v("在 JDK 6u23 版本之后，HotSpot 中默认就已经开启了逃逸分析")]),s._v(" "),a("p",[s._v("如果使用的是较早的版本，开发人员则可以通过：")]),s._v(" "),a("ul",[a("li",[s._v("选项“"),a("code",[s._v("-XX:+DoEscapeAnalysis")]),s._v('"显式开启逃逸分析')]),s._v(" "),a("li",[s._v("通过选项“"),a("code",[s._v("-XX:+PrintEscapeAnalysis")]),s._v('"查看逃逸分析的筛选结果')])]),s._v(" "),a("p",[a("strong",[s._v("结论")]),s._v("："),a("mark",[s._v("开发中能使用局部变量的，就不要使用在方法外定义。")])]),s._v(" "),a("h3",{attrs:{id:"_6-x-2-逃逸分析-代码优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-x-2-逃逸分析-代码优化"}},[s._v("#")]),s._v(" 6.X.2. 逃逸分析：代码优化")]),s._v(" "),a("p",[s._v("使用逃逸分析，编译器可以对代码做如下优化：")]),s._v(" "),a("p",[s._v("一、"),a("mark",[s._v("栈上分配")]),s._v("：将堆分配转化为栈分配。如果一个对象在子程序中被分配，要使指向该对象的指针永远不会发生逃逸，对象可能是栈上分配的候选，而不是堆上分配")]),s._v(" "),a("p",[s._v("二、"),a("mark",[s._v("同步省略")]),s._v("：如果一个对象被发现只有一个线程被访问到，那么对于这个对象的操作可以不考虑同步。")]),s._v(" "),a("p",[s._v("三、"),a("mark",[s._v("分离对象或标量替换")]),s._v("：有的对象可能不需要作为一个连续的内存结构存在也可以被访问到，那么对象的部分（或全部）可以不存储在内存，而是存储在 CPU 寄存器中。")]),s._v(" "),a("h4",{attrs:{id:"栈上分配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#栈上分配"}},[s._v("#")]),s._v(" 栈上分配")]),s._v(" "),a("p",[s._v("JIT 编译器在编译期间根据逃逸分析的结果，发现如果一个对象并没有逃逸出方法的话，就可能被优化成栈上分配。分配完成后，继续在调用栈内执行，最后线程结束，栈空间被回收，局部变量对象也被回收。这样就无须进行垃圾回收了。")]),s._v(" "),a("p",[a("strong",[s._v("常见的栈上分配的场景")])]),s._v(" "),a("p",[s._v("在逃逸分析中，已经说明了。分别是给成员变量赋值、方法返回值、实例引用传递。")]),s._v(" "),a("h4",{attrs:{id:"同步省略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同步省略"}},[s._v("#")]),s._v(" 同步省略")]),s._v(" "),a("p",[s._v("线程同步的代价是相当高的，同步的后果是降低并发性和性能。")]),s._v(" "),a("p",[s._v("在动态编译同步块的时候，JIT 编译器可以"),a("mark",[s._v("借助逃逸分析来判断同步块所使用的锁对象是否只能够被一个线程访问而没有被发布到其他线程")]),s._v("。如果没有，那么 JIT 编译器在编译这个同步块的时候就会取消对这部分代码的同步。这样就能大大提高并发性和性能。这个取消同步的过程就叫同步省略，也叫"),a("mark",[s._v("锁消除")]),s._v("。")]),s._v(" "),a("p",[a("strong",[s._v("举例")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" hellis "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("hellis"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("hellis"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("代码中对 hellis 这个对象加锁，但是 hellis 对象的生命周期只在 f()方法中，并不会被其他线程所访问到，所以在 JIT 编译阶段就会被优化掉，优化成：")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" hellis "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("hellis"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h4",{attrs:{id:"标量替换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标量替换"}},[s._v("#")]),s._v(" 标量替换")]),s._v(" "),a("p",[a("mark",[s._v("标量（scalar）")]),s._v("是指一个无法再分解成更小的数据的数据。Java 中的原始数据类型就是标量。")]),s._v(" "),a("p",[s._v("相对的，那些还可以分解的数据叫做"),a("mark",[s._v("聚合量（Aggregate）")]),s._v("，Java 中的对象就是聚合量，因为他可以分解成其他聚合量和标量。")]),s._v(" "),a("p",[s._v("在 JIT 阶段，如果经过逃逸分析，发现一个对象不会被外界访问的话，那么经过 JIT 优化，就会把这个对象拆解成若干个其中包含的若干个成员变量来代替。这个过程就是标量替换。")]),s._v(" "),a("p",[a("strong",[s._v("举例")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("alloc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("alloc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Point")]),s._v(" point "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Point")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"point.x"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" point"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('";point.y"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" point"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Point")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("以上代码，经过标量替换后，就会变成")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("alloc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" y "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"point.x = "')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"; point.y="')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("可以看到，Point 这个聚合量经过逃逸分析后，发现他并没有逃逸，就被替换成两个标量了。那么标量替换有什么好处呢？就是可以大大减少堆内存的占用。因为一旦不需要创建对象了，那么就不再需要分配堆内存了。 标量替换为栈上分配提供了很好的基础。")]),s._v(" "),a("p",[a("strong",[s._v("标量替换参数设置")])]),s._v(" "),a("p",[s._v("参数"),a("code",[s._v("-XX:EliminateAllocations")]),s._v("：开启了标量替换（默认打开），允许将对象打散分配到栈上。")]),s._v(" "),a("p",[s._v("上述代码在主函数中进行了 1 亿次 alloc。调用进行对象创建，由于 User 对象实例需要占据约 16 字节的空间，因此累计分配空间达到将近 1.5GB。如果堆空间小于这个值，就必然会发生 GC。使用如下参数运行上述代码：")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-server")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Xmx100m")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-Xms100m")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-XX:+DoEscapeAnalysis")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-XX:+PrintGC")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-XX:+EliminateAllocations")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("这里设置参数如下：")]),s._v(" "),a("ul",[a("li",[s._v("参数"),a("code",[s._v("-server")]),s._v("：启动 Server 模式，因为在 server 模式下，才可以启用逃逸分析。")]),s._v(" "),a("li",[s._v("参数"),a("code",[s._v("-XX:+DoEscapeAnalysis")]),s._v("：启用逃逸分析")]),s._v(" "),a("li",[s._v("参数"),a("code",[s._v("-Xmx10m")]),s._v("：指定了堆空间最大为 10MB")]),s._v(" "),a("li",[s._v("参数"),a("code",[s._v("-XX:+PrintGC")]),s._v("：将打印 Gc 日志")]),s._v(" "),a("li",[s._v("参数"),a("code",[s._v("-XX:+EliminateAllocations")]),s._v("：开启了标量替换（默认打开），允许将对象打散分配在栈上，比如对象拥有 id 和 name 两个字段，那么这两个字段将会被视为两个独立的局部变量进行分配")])]),s._v(" "),a("h3",{attrs:{id:"_6-x-3-逃逸分析小结-逃逸分析并不成熟"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-x-3-逃逸分析小结-逃逸分析并不成熟"}},[s._v("#")]),s._v(" 6.X.3. 逃逸分析小结：逃逸分析并不成熟")]),s._v(" "),a("p",[s._v("关于逃逸分析的论文在 1999 年就已经发表了，但直到 JDK1.6 才有实现，而且这项技术到如今也并不是十分成熟。")]),s._v(" "),a("p",[s._v("其根本原因就是"),a("mark",[s._v("无法保证逃逸分析的性能消耗一定能高于他的消耗。虽然经过逃逸分析可以做标量替换、栈上分配、和锁消除。但是逃逸分析自身也是需要进行一系列复杂的分析的，这其实也是一个相对耗时的过程。 ")])]),s._v(" "),a("p",[s._v("一个极端的例子，就是经过逃逸分析之后，发现没有一个对象是不逃逸的。那这个逃逸分析的过程就白白浪费掉了。")]),s._v(" "),a("p",[s._v("虽然这项技术并不十分成熟，但是它也"),a("mark",[s._v("是即时编译器优化技术中一个十分重要的手段")]),s._v("。")]),s._v(" "),a("p",[s._v("注意到有一些观点，认为通过逃逸分析，JVM 会在栈上分配那些不会逃逸的对象，这在理论上是可行的，但是取决于 JVM 设计者的选择。据我所知，Oracle Hotspot JVM 中并未这么做，这一点在逃逸分析相关的文档里已经说明，所以可以明确"),a("mark",[s._v("所有的对象实例都是创建在堆上")]),s._v("。")]),s._v(" "),a("p",[s._v("目前很多书籍还是基于 JDK7 以前的版本，JDK 已经发生了很大变化，intern 字符串的缓存和静态变量曾经都被分配在永久代上，而永久代已经被元数据区取代。但是，intern 字符串缓存和静态变量并不是被转移到元数据区，而是直接在堆上分配，所以这一点同样符合前面一点的结论：对象实例都是分配在堆上。")]),s._v(" "),a("h2",{attrs:{id:"本章小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#本章小结"}},[s._v("#")]),s._v(" 本章小结")]),s._v(" "),a("p",[s._v("年轻代是对象的诞生、成长、消亡的区域，一个对象在这里产生、应用，最后被垃圾回收器收集、结束生命。")]),s._v(" "),a("p",[s._v("老年代放置长生命周期的对象，通常都是从 survivor 区域筛选拷贝过来的 Java 对象。当然，也有特殊情况，我们知道普通的对象会被分配在 TLAB 上；如果对象较大，JVM 会试图直接分配在 Eden 其他位置上；如果对象太大，完全无法在新生代找到足够长的连续空闲空间，JVM 就会直接分配到老年代。当 GC 只发生在年轻代中，回收年轻代对象的行为被称为 MinorGc。")]),s._v(" "),a("p",[s._v("当 GC 发生在老年代时则被称为 MajorGc 或者 FullGC。一般的，MinorGc 的发生频率要比 MajorGC 高很多，即老年代中垃圾回收发生的频率将大大低于年轻代。")])])}),[],!1,null,null,null);a.default=e.exports}}]);