(window.webpackJsonp=window.webpackJsonp||[]).push([[99],{425:function(n,t,o){"use strict";o.r(t);var a=o(7),i=Object(a.a)({},(function(){var n=this,t=n._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h2",{attrs:{id:"一、springboot的核心注解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、springboot的核心注解"}},[n._v("#")]),n._v(" 一、springboot的核心注解")]),n._v(" "),t("h3",{attrs:{id:"_1-springboot-的核心注解是springbootapplication。它由三个注解组成分别是springconfiguration、componentscan、enableautoconfiguration"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-springboot-的核心注解是springbootapplication。它由三个注解组成分别是springconfiguration、componentscan、enableautoconfiguration"}},[n._v("#")]),n._v(" 1. springboot 的核心注解是springbootapplication。它由三个注解组成分别是springconfiguration、componentscan、enableautoconfiguration")]),n._v(" "),t("h4",{attrs:{id:"_1-其中springconfiguration就是configuration的变种-就是把当前类变为配置类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-其中springconfiguration就是configuration的变种-就是把当前类变为配置类"}},[n._v("#")]),n._v(" 1.其中springconfiguration就是configuration的变种，就是把当前类变为配置类")]),n._v(" "),t("h4",{attrs:{id:"_2-componentscan是扫描包路径-默认是启动类所在的包及子包带有约定注解的类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-componentscan是扫描包路径-默认是启动类所在的包及子包带有约定注解的类"}},[n._v("#")]),n._v(" 2. componentscan是扫描包路径，默认是启动类所在的包及子包带有约定注解的类")]),n._v(" "),t("h4",{attrs:{id:"_3-最重要的是enableautoconfiguration"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-最重要的是enableautoconfiguration"}},[n._v("#")]),n._v(" 3. 最重要的是EnableAutoConfiguration")]),n._v(" "),t("p",[n._v("它其实由几个注解组成：\n第一个是registar类，它会把扫描到的所有的类注册到容器中；\n第二个是selector类，它会把所有METE-INFO/spring.factories中写死的自动配置类加载，但是只是按需自动配置。例如以Conditional条件判断")])])}),[],!1,null,null,null);t.default=i.exports}}]);